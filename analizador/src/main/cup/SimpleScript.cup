package org.example;

import java_cup.runtime.*;
import org.example.sym;

parser code {:
    public parser(AnalizadorLexico s) {
        super(s);
    }

    @Override
    public void report_error(String message, Object info) {
        Symbol sym = (Symbol) info;
        int line = sym != null ? sym.left + 1 : -1;
        throw new RuntimeException("Syntax error at line " + line + ": " + message);
    }
:};

terminal DEFINE, PRINT, IF, ELSE, ELSEIF, WHILE, LOOP, FUNCTION, RETURN, END, DO, THEN;
terminal AND, OR, NOT;
terminal PLUS, MINUS, MULT, DIV;
terminal LEQ, GEQ, EQ, NEQ, LT, GT;
terminal ASSIGN, SEMI, COMMA, LPAREN, RPAREN;
terminal Integer ENTERO;
terminal Double NUMERO;
terminal Boolean BOOLEAN;
terminal String ID, CADENA;



non terminal programa, lista_elementos, elemento, bloque, sentencia, lista_sentencias, lista_elseif, lista_parametros, lista_expresiones;
non terminal expr, expr_logica, expr_relacional, expr_aritmetica, term, factor, bloque_return;
non terminal expr_simple;

precedence left OR;
precedence left AND;
precedence right NOT;


start with programa;

programa ::= lista_elementos;
expr_simple ::= ID ASSIGN expr;


lista_elementos ::= lista_elementos elemento
                  | elemento;

elemento ::= sentencia
           | FUNCTION ID LPAREN lista_parametros RPAREN bloque_return END
           | FUNCTION ID LPAREN lista_parametros RPAREN SEMI
             {:
                report_error("';' not allowed after FUNCTION declaration", null);
                RESULT = null;
             :};

bloque_return ::= lista_sentencias RETURN expr SEMI
                | RETURN expr SEMI
                | error
                  {:
                     report_error("Invalid function return block", null);
                     RESULT = null;
                  :};

bloque ::= lista_sentencias;

lista_sentencias ::= lista_sentencias sentencia
                   | sentencia;

sentencia ::= DEFINE ID ASSIGN expr SEMI
            | ID ASSIGN expr SEMI
            | PRINT lista_expresiones SEMI
            | IF expr THEN bloque lista_elseif ELSE bloque END
            | WHILE expr DO bloque END
            | LOOP LPAREN expr_simple SEMI expr SEMI expr_simple RPAREN DO bloque END
            | error SEMI
              {:
                 report_error("Invalid statement", null);
                 RESULT = null;
              :};

lista_elseif ::= lista_elseif ELSEIF expr THEN bloque
               | /* vacío */;

lista_parametros ::= lista_parametros COMMA ID
                   | ID
                   | /* vacío */;

lista_expresiones ::= lista_expresiones COMMA expr
                    | expr;

expr ::= expr_logica;

expr_logica ::= expr_logica AND expr_logica
              | expr_logica OR expr_logica
              | NOT expr_logica
              | expr_relacional;


expr_relacional ::= expr_aritmetica LT expr_aritmetica
                  | expr_aritmetica GT expr_aritmetica
                  | expr_aritmetica LEQ expr_aritmetica
                  | expr_aritmetica GEQ expr_aritmetica
                  | expr_aritmetica EQ expr_aritmetica
                  | expr_aritmetica NEQ expr_aritmetica
                  | expr_aritmetica;

expr_aritmetica ::= expr_aritmetica PLUS term
                  | expr_aritmetica MINUS term
                  | term;

term ::= term MULT factor
       | term DIV factor
       | factor;

factor ::= LPAREN expr RPAREN
         | ID LPAREN lista_expresiones RPAREN
         | ID
         | ENTERO
         | NUMERO
         | BOOLEAN
         | CADENA;
