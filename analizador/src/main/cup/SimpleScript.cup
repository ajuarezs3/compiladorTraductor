package org.example;

import java_cup.runtime.*;
import org.example.Sym;

parser code
{:
    public static int tempCount = 0;

    public static String newTemp() {
        return "t" + (tempCount++);
    }

    public static void main(String[] args) throws Exception {
        parser p = new parser(new AnalizadorLexico(new java.io.FileReader("entrada.ss")));
        p.parse();
    }

    public static int getLine() {
        return ((AnalizadorLexico)parser.getScanner()).getLine();
    }
:};

action code
{:
    // Aquí podrías manejar un generador de código TAC
:};

// Declaración de tokens
terminal DEFINE, PRINT, IF, ELSE, ELSEIF, WHILE, LOOP, FUNCTION, RETURN, END;
terminal TRUE, FALSE;
terminal AND, OR, NOT;
terminal PLUS, MINUS, MULT, DIV;
terminal LEQ, GEQ, EQ, NEQ, LT, GT;
terminal ASSIGN, SEMI, COMMA, LPAREN, RPAREN;
terminal Double NUMERO;
terminal String ID, CADENA;

// No terminales
non terminal programa, bloque, sentencia, lista_sentencias, lista_elseif, lista_expresiones;
non terminal String expr, expr_logica, expr_logica_aux, expr_relacional, expr_relacional_aux, expr_aritmetica, expr_aritmetica_aux, expr_primaria;

start with programa;

programa ::= bloque ;

bloque ::= lista_sentencias ;

lista_sentencias ::= lista_sentencias sentencia
                   | sentencia ;

sentencia ::= DEFINE ID ASSIGN expr SEMI
            {: System.out.println(parser.newTemp() + " = " + $4);
               System.out.println($2 + " = " + parser.newTemp()); :}
           | PRINT expr SEMI
            {: System.out.println("print " + $2); :}
           | IF expr bloque ELSE bloque END
            {: System.out.println("Condicional IF-ELSE evaluado"); :}
           | IF expr bloque END
            {: System.out.println("Condicional IF evaluado"); :}
           | IF expr bloque lista_elseif ELSE bloque END
            {: System.out.println("Condicional IF-ELSEIF-ELSE evaluado"); :}
           | WHILE expr bloque END
            {: System.out.println("Bucle WHILE evaluado"); :}
           | LOOP LPAREN sentencia expr sentencia RPAREN bloque END
            {: System.out.println("Bucle tipo FOR evaluado"); :}
           | FUNCTION ID LPAREN lista_expresiones RPAREN bloque RETURN expr SEMI END
            {: System.out.println("Función " + $2 + " definida"); :}
           | error SEMI
            {: System.err.println("Error de sintaxis en sentencia en línea "
                    + ((AnalizadorLexico)parser.getScanner()).getLine()); :};

lista_elseif ::= lista_elseif ELSEIF expr bloque
               | ELSEIF expr bloque ;

lista_expresiones ::= lista_expresiones COMMA expr
                    | expr
                    | /* vacío */ ;

expr ::= expr_logica;

expr_logica ::= expr_relacional expr_logica_aux {: RESULT = $1 + $2; :};

expr_logica_aux ::= AND expr_relacional expr_logica_aux {: RESULT = " AND " + $2 + $3; :}
                  | OR expr_relacional expr_logica_aux {: RESULT = " OR " + $2 + $3; :}
                  | /* vacío */ {: RESULT = ""; :};

expr_relacional ::= expr_aritmetica expr_relacional_aux {: RESULT = $1 + $2; :};

expr_relacional_aux ::= EQ expr_aritmetica {: RESULT = " == " + $2; :}
                      | NEQ expr_aritmetica {: RESULT = " != " + $2; :}
                      | LT expr_aritmetica {: RESULT = " < " + $2; :}
                      | GT expr_aritmetica {: RESULT = " > " + $2; :}
                      | LEQ expr_aritmetica {: RESULT = " <= " + $2; :}
                      | GEQ expr_aritmetica {: RESULT = " >= " + $2; :}
                      | /* vacío */ {: RESULT = ""; :};

expr_aritmetica ::= expr_primaria expr_aritmetica_aux {: RESULT = $1 + $2; :};

expr_aritmetica_aux ::= PLUS expr_primaria expr_aritmetica_aux
    {: String t = parser.newTemp(); System.out.println(t + " = " + $0 + " + " + $2); RESULT = " + " + $2 + $3; :}
                      | MINUS expr_primaria expr_aritmetica_aux
    {: String t = parser.newTemp(); System.out.println(t + " = " + $0 + " - " + $2); RESULT = " - " + $2 + $3; :}
                      | MULT expr_primaria expr_aritmetica_aux
    {: String t = parser.newTemp(); System.out.println(t + " = " + $0 + " * " + $2); RESULT = " * " + $2 + $3; :}
                      | DIV expr_primaria expr_aritmetica_aux
    {: String t = parser.newTemp(); System.out.println(t + " = " + $0 + " / " + $2); RESULT = " / " + $2 + $3; :}
                      | /* vacío */ {: RESULT = ""; :};

expr_primaria ::= LPAREN expr RPAREN {: RESULT = "(" + $2 + ")"; :}
                | NUMERO {: RESULT = String.valueOf($1); :}
                | ID {: RESULT = $1; :}
                | TRUE {: RESULT = "true"; :}
                | FALSE {: RESULT = "false"; :}
                | CADENA {: RESULT = $1; :};