// parser.cup
package org.example;

import java_cup.runtime.*;

parser code
{:
    public static void main(String[] args) throws Exception {
        parser p = new parser(new AnalizadorLexico(new java.io.FileReader("entrada.ss")));
        p.parse();
    }

    public static int getLine() {
        return ((AnalizadorLexico)parser.getScanner()).getLine();
    }

:};

action code
{:
    // Puedes crear aquí estructuras para el AST o generación de código
:};

// Declaración de tokens
terminal DEFINE, PRINT, IF, ELSE, ELSEIF, WHILE, LOOP, FUNCTION, RETURN, END;
terminal TRUE, FALSE;
terminal AND, OR, NOT;
terminal PLUS, MINUS, MULT, DIV;
terminal LEQ, GEQ, EQ, NEQ, LT, GT;
terminal ASSIGN, SEMI, COMMA, LPAREN, RPAREN;
terminal Double NUMERO;
terminal String ID, CADENA;

// No terminales
non terminal programa, bloque, sentencia, lista_sentencias, lista_elseif, lista_expresiones;
non terminal String expresion;

start with programa;

// Reglas de producción
programa ::= bloque ;

bloque ::= lista_sentencias ;

lista_sentencias ::= lista_sentencias sentencia
                   | sentencia ;

sentencia ::= DEFINE ID ASSIGN expresion SEMI
            {: System.out.println("Asignar: " + $2 + " = " + $4); :}
           | PRINT expresion SEMI
            {: System.out.println("Imprimir: " + $2); :}
           | IF expresion bloque ELSE bloque END
            {: System.out.println("Condicional IF-ELSE evaluado"); :}
           | IF expresion bloque END
            {: System.out.println("Condicional IF evaluado"); :}
           | IF expresion bloque lista_elseif ELSE bloque END
            {: System.out.println("Condicional IF-ELSEIF-ELSE evaluado"); :}
           | WHILE expresion bloque END
            {: System.out.println("Bucle WHILE evaluado"); :}
           | LOOP LPAREN sentencia expresion sentencia RPAREN bloque END
            {: System.out.println("Bucle tipo FOR evaluado"); :}
           | FUNCTION ID LPAREN lista_expresiones RPAREN bloque RETURN expresion SEMI END
            {: System.out.println("Función " + $2 + " definida"); :}
           | error SEMI
            {:
                System.err.println("Error de sintaxis en sentencia en línea "
                    + ((AnalizadorLexico)parser.getScanner()).getLine());
            :};

lista_elseif ::= lista_elseif ELSEIF expresion bloque
               | ELSEIF expresion bloque ;

lista_expresiones ::= lista_expresiones COMMA expresion
                    | expresion
                    | /* vacío */ ;

expresion ::= expresion PLUS expresion {: RESULT = $1 + "+" + $3; :}
           | expresion MINUS expresion {: RESULT = $1 + "-" + $3; :}
           | expresion MULT expresion {: RESULT = $1 + "*" + $3; :}
           | expresion DIV expresion {: RESULT = $1 + "/" + $3; :}
           | expresion EQ expresion {: RESULT = $1 + "==" + $3; :}
           | expresion NEQ expresion {: RESULT = $1 + "!=" + $3; :}
           | expresion LT expresion {: RESULT = $1 + "<" + $3; :}
           | expresion GT expresion {: RESULT = $1 + ">" + $3; :}
           | expresion LEQ expresion {: RESULT = $1 + "<=" + $3; :}
           | expresion GEQ expresion {: RESULT = $1 + ">=" + $3; :}
           | expresion AND expresion {: RESULT = $1 + "AND" + $3; :}
           | expresion OR expresion {: RESULT = $1 + "OR" + $3; :}
           | NOT expresion {: RESULT = "NOT" + $2; :}
           | LPAREN expresion RPAREN {: RESULT = "(" + $2 + ")"; :}
           | NUMERO {: RESULT = String.valueOf($1); :}
           | ID {: RESULT = $1; :}
           | TRUE {: RESULT = "true"; :}
           | FALSE {: RESULT = "false"; :}
           | CADENA {: RESULT = $1; :} ;
