
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package org.example;

import java_cup.runtime.*;
import org.example.sym;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\003\000\002\022" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\011\000\002\004\010\000\002\021\006\000" +
    "\002\021\005\000\002\021\003\000\002\005\003\000\002" +
    "\007\004\000\002\007\003\000\002\006\007\000\002\006" +
    "\006\000\002\006\005\000\002\006\012\000\002\006\007" +
    "\000\002\006\015\000\002\006\004\000\002\010\007\000" +
    "\002\010\002\000\002\011\005\000\002\011\003\000\002" +
    "\011\002\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\004" +
    "\000\002\014\003\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\020\005\000\002\020\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\022\003\015\004\006\005\016\006\013\011" +
    "\005\012\012\013\017\045\014\001\002\000\004\002\171" +
    "\001\002\000\020\022\050\040\052\042\042\043\044\044" +
    "\043\045\045\046\036\001\002\000\004\045\161\001\002" +
    "\000\024\002\000\003\015\004\006\005\016\006\013\011" +
    "\005\012\012\013\017\045\014\001\002\000\024\002\ufffd" +
    "\003\ufffd\004\ufffd\005\ufffd\006\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\045\ufffd\001\002\000\024\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\011\ufffc\012\ufffc\013\ufffc\045\ufffc\001" +
    "\002\000\004\040\143\001\002\000\020\022\050\040\052" +
    "\042\042\043\044\044\043\045\045\046\036\001\002\000" +
    "\004\035\124\001\002\000\004\036\117\001\002\000\020" +
    "\022\050\040\052\042\042\043\044\044\043\045\045\046" +
    "\036\001\002\000\004\045\020\001\002\000\004\040\021" +
    "\001\002\000\010\037\uffe8\041\uffe8\045\022\001\002\000" +
    "\006\037\uffe9\041\uffe9\001\002\000\006\037\024\041\025" +
    "\001\002\000\004\045\121\001\002\000\024\003\031\004" +
    "\006\005\016\006\013\011\005\012\012\014\032\036\030" +
    "\045\014\001\002\000\030\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4" +
    "\045\ufff4\001\002\000\004\015\120\001\002\000\024\002" +
    "\ufffa\003\ufffa\004\ufffa\005\ufffa\006\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\045\ufffa\001\002\000\006\015\ufff7\036\117\001" +
    "\002\000\020\022\050\040\052\042\042\043\044\044\043" +
    "\045\045\046\036\001\002\000\022\003\015\004\006\005" +
    "\016\006\013\011\005\012\012\014\035\045\014\001\002" +
    "\000\030\003\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\045\ufff5\001\002" +
    "\000\020\022\050\040\052\042\042\043\044\044\043\045" +
    "\045\046\036\001\002\000\044\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037\uffcd" +
    "\041\uffcd\001\002\000\040\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\023\101\024\103\027\102\030\100\031\076\032\104" +
    "\033\075\034\077\036\uffda\037\uffda\041\uffda\001\002\000" +
    "\020\016\uffe5\017\uffe5\020\057\021\060\036\uffe5\037\uffe5" +
    "\041\uffe5\001\002\000\044\016\uffd7\017\uffd7\020\uffd7\021" +
    "\uffd7\023\uffd7\024\uffd7\025\071\026\072\027\uffd7\030\uffd7" +
    "\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\037\uffd7\041" +
    "\uffd7\001\002\000\044\016\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\037\uffd0\041\uffd0" +
    "\001\002\000\044\016\uffce\017\uffce\020\uffce\021\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\041\uffce\001" +
    "\002\000\044\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\036\uffcf\037\uffcf\041\uffcf\001\002" +
    "\000\046\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\036\uffd1\037\uffd1\040\063\041\uffd1\001" +
    "\002\000\044\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4" +
    "\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032" +
    "\uffd4\033\uffd4\034\uffd4\036\uffd4\037\uffd4\041\uffd4\001\002" +
    "\000\020\016\uffe1\017\uffe1\020\uffe1\021\uffe1\036\uffe1\037" +
    "\uffe1\041\uffe1\001\002\000\020\022\050\040\052\042\042" +
    "\043\044\044\043\045\045\046\036\001\002\000\004\036" +
    "\055\001\002\000\020\022\050\040\052\042\042\043\044" +
    "\044\043\045\045\046\036\001\002\000\004\041\054\001" +
    "\002\000\044\016\uffd3\017\uffd3\020\uffd3\021\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\036\uffd3\037\uffd3\041\uffd3\001\002" +
    "\000\004\015\ufff9\001\002\000\020\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\036\uffe2\037\uffe2\041\uffe2\001\002\000\020" +
    "\022\050\040\052\042\042\043\044\044\043\045\045\046" +
    "\036\001\002\000\020\022\050\040\052\042\042\043\044" +
    "\044\043\045\045\046\036\001\002\000\020\016\uffe3\017" +
    "\uffe3\020\057\021\uffe3\036\uffe3\037\uffe3\041\uffe3\001\002" +
    "\000\020\016\uffe4\017\uffe4\020\uffe4\021\uffe4\036\uffe4\037" +
    "\uffe4\041\uffe4\001\002\000\020\022\050\040\052\042\042" +
    "\043\044\044\043\045\045\046\036\001\002\000\006\037" +
    "\066\041\067\001\002\000\010\036\uffe6\037\uffe6\041\uffe6" +
    "\001\002\000\020\022\050\040\052\042\042\043\044\044" +
    "\043\045\045\046\036\001\002\000\044\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\036\uffd2" +
    "\037\uffd2\041\uffd2\001\002\000\010\036\uffe7\037\uffe7\041" +
    "\uffe7\001\002\000\016\040\052\042\042\043\044\044\043" +
    "\045\045\046\036\001\002\000\016\040\052\042\042\043" +
    "\044\044\043\045\045\046\036\001\002\000\044\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\036\uffd5\037\uffd5\041\uffd5\001\002\000\044\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036" +
    "\uffd6\037\uffd6\041\uffd6\001\002\000\016\040\052\042\042" +
    "\043\044\044\043\045\045\046\036\001\002\000\016\040" +
    "\052\042\042\043\044\044\043\045\045\046\036\001\002" +
    "\000\016\040\052\042\042\043\044\044\043\045\045\046" +
    "\036\001\002\000\016\040\052\042\042\043\044\044\043" +
    "\045\045\046\036\001\002\000\016\040\052\042\042\043" +
    "\044\044\043\045\045\046\036\001\002\000\016\040\052" +
    "\042\042\043\044\044\043\045\045\046\036\001\002\000" +
    "\016\040\052\042\042\043\044\044\043\045\045\046\036" +
    "\001\002\000\016\040\052\042\042\043\044\044\043\045" +
    "\045\046\036\001\002\000\024\016\uffdb\017\uffdb\020\uffdb" +
    "\021\uffdb\023\101\024\103\036\uffdb\037\uffdb\041\uffdb\001" +
    "\002\000\044\016\uffd8\017\uffd8\020\uffd8\021\uffd8\023\uffd8" +
    "\024\uffd8\025\071\026\072\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\036\uffd8\037\uffd8\041\uffd8\001\002" +
    "\000\024\016\uffde\017\uffde\020\uffde\021\uffde\023\101\024" +
    "\103\036\uffde\037\uffde\041\uffde\001\002\000\044\016\uffd9" +
    "\017\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\071\026" +
    "\072\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\036\uffd9\037\uffd9\041\uffd9\001\002\000\024\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\023\101\024\103\036\uffdd\037\uffdd" +
    "\041\uffdd\001\002\000\024\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\023\101\024\103\036\uffdf\037\uffdf\041\uffdf\001\002" +
    "\000\024\016\uffdc\017\uffdc\020\uffdc\021\uffdc\023\101\024" +
    "\103\036\uffdc\037\uffdc\041\uffdc\001\002\000\024\016\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\023\101\024\103\036\uffe0\037" +
    "\uffe0\041\uffe0\001\002\000\004\036\116\001\002\000\004" +
    "\015\ufff8\001\002\000\034\002\uffed\003\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\045\uffed\001\002\000\024\002\ufffb\003" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\045\ufffb\001\002\000\006\037\uffea\041\uffea\001\002\000" +
    "\006\036\123\037\066\001\002\000\034\002\ufff1\003\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\045\ufff1\001\002\000\020" +
    "\022\050\040\052\042\042\043\044\044\043\045\045\046" +
    "\036\001\002\000\004\036\126\001\002\000\034\002\ufff2" +
    "\003\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\045\ufff2\001\002" +
    "\000\004\017\130\001\002\000\020\003\015\004\006\005" +
    "\016\006\013\011\005\012\012\045\014\001\002\000\006" +
    "\007\uffeb\010\uffeb\001\002\000\026\003\015\004\006\005" +
    "\016\006\013\007\ufff6\010\ufff6\011\005\012\012\015\ufff6" +
    "\045\014\001\002\000\006\007\134\010\135\001\002\000" +
    "\020\003\015\004\006\005\016\006\013\011\005\012\012" +
    "\045\014\001\002\000\020\022\050\040\052\042\042\043" +
    "\044\044\043\045\045\046\036\001\002\000\004\017\137" +
    "\001\002\000\020\003\015\004\006\005\016\006\013\011" +
    "\005\012\012\045\014\001\002\000\006\007\uffec\010\uffec" +
    "\001\002\000\004\015\142\001\002\000\034\002\ufff0\003" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\013\ufff0\014\ufff0\015\ufff0\045\ufff0\001\002\000" +
    "\004\045\144\001\002\000\004\035\156\001\002\000\004" +
    "\036\146\001\002\000\020\022\050\040\052\042\042\043" +
    "\044\044\043\045\045\046\036\001\002\000\004\036\150" +
    "\001\002\000\004\045\144\001\002\000\004\041\152\001" +
    "\002\000\004\016\153\001\002\000\020\003\015\004\006" +
    "\005\016\006\013\011\005\012\012\045\014\001\002\000" +
    "\004\015\155\001\002\000\034\002\uffee\003\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\045\uffee\001\002\000\020\022\050" +
    "\040\052\042\042\043\044\044\043\045\045\046\036\001" +
    "\002\000\006\036\uffff\041\uffff\001\002\000\024\002\ufffe" +
    "\003\ufffe\004\ufffe\005\ufffe\006\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\045\ufffe\001\002\000\004\035\162\001\002\000\020" +
    "\022\050\040\052\042\042\043\044\044\043\045\045\046" +
    "\036\001\002\000\004\036\164\001\002\000\034\002\ufff3" +
    "\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\045\ufff3\001\002" +
    "\000\004\016\166\001\002\000\020\003\015\004\006\005" +
    "\016\006\013\011\005\012\012\045\014\001\002\000\004" +
    "\015\170\001\002\000\034\002\uffef\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\045\uffef\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\012\002\003\003\006\004\007\006\010\001" +
    "\001\000\002\001\001\000\016\013\164\014\037\015\046" +
    "\016\036\017\040\020\045\001\001\000\002\001\001\000" +
    "\006\004\157\006\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\126\014\037\015" +
    "\046\016\036\017\040\020\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\121\013\064\014\037\015" +
    "\046\016\036\017\040\020\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\025" +
    "\007\032\021\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\114" +
    "\014\037\015\046\016\036\017\040\020\045\001\001\000" +
    "\004\006\033\001\001\000\002\001\001\000\016\013\050" +
    "\014\037\015\046\016\036\017\040\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\055\015\046\016\036\017\040\020\045\001" +
    "\001\000\002\001\001\000\016\013\052\014\037\015\046" +
    "\016\036\017\040\020\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\061\015\046\016\036\017\040\020\045\001\001\000" +
    "\014\014\060\015\046\016\036\017\040\020\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\012\063\013" +
    "\064\014\037\015\046\016\036\017\040\020\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\067\014" +
    "\037\015\046\016\036\017\040\020\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\073\001\001\000" +
    "\004\020\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\113\017\040\020\045\001\001\000\010\016" +
    "\112\017\040\020\045\001\001\000\010\016\111\017\040" +
    "\020\045\001\001\000\010\016\110\017\040\020\045\001" +
    "\001\000\006\017\107\020\045\001\001\000\010\016\106" +
    "\017\040\020\045\001\001\000\006\017\105\020\045\001" +
    "\001\000\010\016\104\017\040\020\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\124\014\037\015" +
    "\046\016\036\017\040\020\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\130\006" +
    "\025\007\131\001\001\000\004\010\132\001\001\000\004" +
    "\006\033\001\001\000\002\001\001\000\010\005\140\006" +
    "\025\007\131\001\001\000\016\013\135\014\037\015\046" +
    "\016\036\017\040\020\045\001\001\000\002\001\001\000" +
    "\010\005\137\006\025\007\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\146" +
    "\014\037\015\046\016\036\017\040\020\045\001\001\000" +
    "\002\001\001\000\004\022\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\153\006\025\007\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\156" +
    "\014\037\015\046\016\036\017\040\020\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\162\014\037\015\046\016\036\017\040\020\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\166\006\025\007\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public parser(AnalizadorLexico s) {
        super(s);
    }

   @Override
   public void report_error(String message, Object info) {
       if (info instanceof Symbol sym && sym.value != null) {
           if (!sym.value.toString().contains("ilegal")) {
               String errorMsg = "Error en linea " + (sym.left + 1) +", columna " + (sym.right + 1) + ": simbolo no esperado -> '" + sym.value + "'";
               System.err.println(errorMsg);
               throw new RuntimeException(errorMsg);
           }
       } else {
           String fallback = "Error : simbolo no reconocido o vacio.";
           System.err.println(fallback);
           throw new RuntimeException(fallback);
       }
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= lista_elementos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_simple ::= ID ASSIGN expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_simple",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // lista_elementos ::= lista_elementos elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elementos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lista_elementos ::= elemento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elementos",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // elemento ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // elemento ::= FUNCTION ID LPAREN lista_parametros RPAREN bloque_return END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elemento ::= FUNCTION ID LPAREN lista_parametros RPAREN SEMI 
            {
              Object RESULT =null;
		
                report_error("';' not allowed after FUNCTION declaration", null);
                RESULT = null;
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elemento",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bloque_return ::= lista_sentencias RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_return",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bloque_return ::= RETURN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_return",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloque_return ::= error 
            {
              Object RESULT =null;
		
                     report_error("Invalid function return block", null);
                     RESULT = null;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_return",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque ::= lista_sentencias 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= DEFINE ID ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= ID ASSIGN expr SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= PRINT lista_expresiones SEMI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= IF expr THEN bloque lista_elseif ELSE bloque END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= WHILE expr DO bloque END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= LOOP LPAREN expr_simple SEMI expr SEMI expr_simple RPAREN DO bloque END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencia ::= error SEMI 
            {
              Object RESULT =null;
		
                 report_error("Invalid statement", null);
                 RESULT = null;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_elseif ::= lista_elseif ELSEIF expr THEN bloque 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elseif",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_elseif ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_elseif",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_parametros ::= lista_parametros COMMA ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_parametros ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_parametros ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_expresiones ::= lista_expresiones COMMA expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_expresiones ::= expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_expresiones",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr_logica ::= expr_logica AND expr_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr_logica ::= expr_logica OR expr_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr_logica ::= NOT expr_logica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_logica ::= expr_relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_logica",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_relacional ::= expr_aritmetica LT expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_relacional ::= expr_aritmetica GT expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_relacional ::= expr_aritmetica LEQ expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_relacional ::= expr_aritmetica GEQ expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_relacional ::= expr_aritmetica EQ expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_relacional ::= expr_aritmetica NEQ expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_relacional ::= expr_aritmetica 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_aritmetica ::= expr_aritmetica PLUS term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_aritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr_aritmetica ::= expr_aritmetica MINUS term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_aritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr_aritmetica ::= term 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_aritmetica",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term MULT factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= term DIV factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= factor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= ID LPAREN lista_expresiones RPAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= ENTERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
